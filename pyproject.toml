[project]
name = "sparkdq"
version = "0.1.0"
description = "A declarative PySpark framework for row- and aggregate-level data quality validation."
authors = [{ name = "Marcel Kennert", email = "marcel.kennert@gmx.de" }]
readme = "README.md"
keywords = [
  "data-quality",
  "data-validation",
  "pyspark",
  "spark",
  "etl",
  "data-pipeline",
  "apache-spark",
  "lightweight"
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Science/Research",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Quality Assurance",
  "Topic :: Scientific/Engineering :: Information Analysis",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: OS Independent"
]
requires-python = ">=3.10"
dependencies = [
    "pyspark>=3.5.0,<4.0.0",
]

[project.urls]
homepage = "https://github.com/sparkdq-community/sparkdq"
documentation = "https://sparkdq-community.github.io/sparkdq/"

[tool.uv]
default-groups = "all"

[dependency-groups]
dev = [
    "pre-commit>=4.2.0,<5.0.0"
]
lint = [
    "ruff>=0.11.0,<1.0.0",
    "mypy>=1.15.0,<2.0.0"
]
test = [
    "pytest>=8.3.5,<9.0.0",
    "pytest-cov>=6.1.0,<7.0.0",
    "pyarrow>=19.0.0,<20.0.0",
    "numpy<2.0.0",
    "pandas>=2.0.0"
]
docs = [
    "sphinx>=7.2.0,<8.0.0",
    "sphinx-copybutton>=0.5.2,<1.0.0",
    "sphinx-book-theme>=1.1.0,<2.0.0",
    "myst-parser>=2.0.0,<3.0.0"
]
jupyter = [
    "notebook>=7.3.3,<8.0.0",
    "ipykernel>=6.20.0,<7.0.0"
]

[tool.mypy]
python_version = "3.11"
exclude = ["docs", "tests", "examples"]
strict = true
show_error_codes = true

[tool.ruff]
exclude = [
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "docs",
]
line-length = 110
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W"]
extend-ignore = ["N812", "N803"]

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = [
  "ignore:.*distutils Version classes are deprecated.*:DeprecationWarning",
  "ignore:.*PYARROW_IGNORE_TIMEZONE.*:UserWarning",
]

[tool.coverage.run]
source = ["sparkdq"]

[tool.semantic_release]
commit_message = "chore(release): {version} [skip ci]\n\nAutomatically generated by python-semantic-release"
commit_parser = "conventional"
major_on_zero = false
allow_zero_version = true
version_toml = ["pyproject.toml:project.version"]
version_variable = ["sparkdq/__init__.py:__version__"]

[tool.semantic_release.changelog]
exclude_commit_patterns = ["Merge branch*", "chore(release)*"]

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore",
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "refactor"]

[tool.semantic_release.branches.main]
match = "main"
